var search_data = {"index":{"searchIndex":["cooccour","job","object","twitterclient","[]()","[]()","add()","feeling()","gen_id()","id()","job()","listen()","new()","new()","new()","occour()","queue()","tag()","tweet()","twitter()","words()","init","init~","config.json","config.json~","pipeline.rb~","stats.rb~","twitter.rb~","mango","mango~"],"longSearchIndex":["cooccour","job","object","twitterclient","cooccour#[]()","twitterclient#[]()","cooccour#add()","cooccour#feeling()","object#gen_id()","job#id()","object#job()","object#listen()","cooccour::new()","job::new()","twitterclient::new()","cooccour#occour()","object#queue()","cooccour#tag()","twitterclient#tweet()","twitterclient#twitter()","cooccour#words()","","","","","","","","",""],"info":[["CoOccour","","CoOccour.html","",""],["Job","","Job.html","",""],["Object","","Object.html","",""],["TwitterClient","","TwitterClient.html","",""],["[]","CoOccour","CoOccour.html#method-i-5B-5D","(k)",""],["[]","TwitterClient","TwitterClient.html#method-i-5B-5D","(k)",""],["add","CoOccour","CoOccour.html#method-i-add","(w, k)",""],["feeling","CoOccour","CoOccour.html#method-i-feeling","()",""],["gen_id","Object","Object.html#method-i-gen_id","(*i)","<p>generate generic job id\n"],["id","Job","Job.html#method-i-id","()",""],["job","Object","Object.html#method-i-job","(h)","\n<pre>job from: &#39;user&#39;, [ to: &#39;user&#39;, queue: &#39;queue&#39;, ( order: &#39;order&#39;, price: 1, location: &#39;locatioon&#39; ) ]</pre>\n"],["listen","Object","Object.html#method-i-listen","(f)","\n<pre class=\"ruby\"><span class=\"ruby-identifier\">listen</span>\n</pre>\n<p>stream twitter for a particular subject and add feed to stats.\n"],["new","CoOccour","CoOccour.html#method-c-new","(k)",""],["new","Job","Job.html#method-c-new","(h={})",""],["new","TwitterClient","TwitterClient.html#method-c-new","()",""],["occour","CoOccour","CoOccour.html#method-i-occour","()",""],["queue","Object","Object.html#method-i-queue","(*q)","\n<pre class=\"ruby\"><span class=\"ruby-identifier\">queue</span>\n</pre>\n<p>manage job queues. queue name =&gt; [ job, job, job ] queue name, new_job\n=&gt; [ job, job, job, …\n"],["tag","CoOccour","CoOccour.html#method-i-tag","(str)",""],["tweet","TwitterClient","TwitterClient.html#method-i-tweet","(m)",""],["twitter","TwitterClient","TwitterClient.html#method-i-twitter","()",""],["words","CoOccour","CoOccour.html#method-i-words","()",""],["init","","bin/init.html","","<p>require &#39;json&#39; require &#39;pry&#39; require\n&#39;redis-objects&#39; if ARGF.argv == &#39;–monitor&#39; …\n"],["init~","","bin/init~.html","","<p>require &#39;json&#39; require &#39;pry&#39; require\n&#39;redis-objects&#39; Process.detach( fork {  …\n"],["config.json","","config_json.html","","<p>{\n\n<pre>&quot;mode&quot;: &quot;development&quot;,\n&quot;TWITTER_USER&quot;: &quot;unkncat&quot;</pre>\n<p>}\n"],["config.json~","","config_json~.html","","<p>{\n\n<pre>&quot;mode&quot;: &quot;development&quot;</pre>\n<p>}\n"],["pipeline.rb~","","lib/pipeline_rb~.html","","<p>def queue *q\n\n<pre>if q[0]\n  if q[1]\n    Redis::List.new(&quot;queue:#{q[0]}&quot;) &lt;&lt; q[1]\n  else\n    Redis::List.new(&quot;queue:#{q[0]}&quot;) ...</pre>\n"],["stats.rb~","","lib/stats_rb~.html","","<p>require &#39;sentimental&#39;\n<p>class CoOccour\n\n<pre>def initialize\n  @sentiment = Sentimental.new\n  @sentiment.load_defaults ...</pre>\n"],["twitter.rb~","","lib/twitter_rb~.html","","<p>require &#39;tw&#39;\n<p>class TwitterClient\n\n<pre>def initialize\n  @twitter = Tw::Client.new\n  @twitter.auth CONF[&#39;TWITTER_USER&#39;] ...</pre>\n"],["mango","","mango.html","","<p>ruby bin/init $*\n"],["mango~","","mango~.html","",""]]}}